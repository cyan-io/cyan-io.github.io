<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Cyan&#39;s Notebook</title>
    <link>/</link>
    <description>Cyan&#39;s Notebook</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 22 Apr 2023 06:19:00 &#43;0000</lastBuildDate>
      <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
  <title>Mini VUE Page</title>
  <link>/posts/2023-04-22-mini-vue-page/</link>
  <pubDate>Sat, 22 Apr 2023 06:19:00 &#43;0000</pubDate>
  <author>Cyan</author>
  <guid>/posts/2023-04-22-mini-vue-page/</guid>
  <description><![CDATA[ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 &lt;script src=&#34;https://unpkg.com/vue@3/dist/vue.global.js&#34;&gt;&lt;/script&gt; &lt;div id=&#34;app&#34;&gt;{{ message }}&lt;/div&gt; &lt;script&gt; const { createApp } = Vue createApp({ data() { return { message: &#39;Hello Vue!&#39; } } }).mount(&#39;#app&#39;) &lt;/script&gt; ]]></description>
</item>
<item>
  <title>Assembly Language</title>
  <link>/posts/2023-04-21-assembly-language/</link>
  <pubDate>Fri, 21 Apr 2023 06:43:19 &#43;0000</pubDate>
  <author>Cyan</author>
  <guid>/posts/2023-04-21-assembly-language/</guid>
  <description><![CDATA[ 参考教材：《汇编语言》第4版 王爽，仅作有选择的摘要。
一、基础知识 汇编语言组成 汇编指令（核心）：机器码的助记符，有对应机器码 伪指令：没有对应机器码，由编译器执行，计算机不执行 其他符号：如+-*/，由编译器识别，没有对应机器码 指令和数据 应用上的概念，在内存或磁盘上没有任何区别（二进制信息）
存储单元 单个单元：8bit =&gt; 1Byte
CPU读写存储器 地址线 存储单元的地址（地址信息） 寻址能力：$2^{width} Byte$ 控制线 器件选择，读或写的命令（控制信息） 数据线 读或写的数据（数据信息） 一次数据传送量：$width\ bit$ 二、寄存器 ]]></description>
</item>
<item>
  <title>C&#43;&#43; Function Lambda</title>
  <link>/posts/function-lambda/</link>
  <pubDate>Fri, 21 Apr 2023 06:37:08 &#43;0000</pubDate>
  <author>Cyan</author>
  <guid>/posts/function-lambda/</guid>
  <description><![CDATA[Section A 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include &lt;functional&gt; #include &lt;iostream&gt; int main() { int a = 5, b = -5; auto lmbd = [&amp;](int a) -&gt; void { --a; --b; }; std::function&lt;void(int)&gt; func = [&amp;](int a) -&gt; void { --a; --b; }; func(a); std::cout &lt;&lt; a &lt;&lt; &#39; &#39; &lt;&lt; b &lt;&lt; std::endl; return 0; } Section B 698.]]></description>
</item>
<item>
  <title>Linux内核源码阅读、下载</title>
  <link>/posts/linux-source/</link>
  <pubDate>Wed, 15 Mar 2023 06:11:22 &#43;0000</pubDate>
  <author>Cyan</author>
  <guid>/posts/linux-source/</guid>
  <description><![CDATA[在线阅读 https://elixir.bootlin.com/linux/0.11/source
源码下载（Mirror） http://ftp.sjtu.edu.cn/sites/ftp.kernel.org/pub/linux/kernel/Historic/old-versions/]]></description>
</item>
<item>
  <title>Internet Protocol Stack</title>
  <link>/posts/internet-protocol-stack/</link>
  <pubDate>Wed, 15 Mar 2023 06:06:20 &#43;0000</pubDate>
  <author>Cyan</author>
  <guid>/posts/internet-protocol-stack/</guid>
  <description><![CDATA[因特网协议栈中的层 TCP/IP协议族 - 维基百科，自由的百科全书 (wikipedia.org)
人们已经进行一些讨论关于如何将TCP/IP参考模型映射到OSI模型。由于TCP/IP和OSI模型组不能精确地匹配，还没有一个完全正确的答案。 另外，OSI模型下层还不具备能够真正占据真正层的位置的能力；在传输层和网络层之间还需要另外一个层（网络互连层）。特定网络类型专用的一些协议应该运行在网络层上，但是却运行在基本的硬件帧交换上。类似协议的例子有ARP和STP（用来保持冗余网桥的空闲状态直到真正需要它们）。然而，它们是本地协议并且在网络互连功能下面运行。不可否认，将两个组（更不用说它们只是运行在如ICMP等不同的互连网络协议上的逻辑上的网络层的一部分）整个放在同一层会引起混淆，但是OSI模型还没有复杂到能够做更好的工作。 下面的图表试图显示不同的TCP/IP和其他的协议在最初OSI模型中的位置：
7 应用层 application layer 例如HTTP、SMTP、SNMP、FTP、Telnet、SIP、SSH、NFS、RTSP、XMPP、Whois、ENRP、TLS 6 表示层 presentation layer 例如XDR、ASN.1、NCP、TLS、ASCII 5 会话层 session layer 例如ASAP、ISO 8327 / CCITT X.225、RPC、NetBIOS、Winsock、BSD sockets、SOCKS、PAP 4 传输层 transport layer 例如TCP、UDP、RTP、SCTP、SPX、ATP、IL 3 网络层 network layer 例如IP、ICMP、IPX、BGP、OSPF、RIP、IGRP、EIGRP、ARP、RARP、X.25 2 数据链路层 data link layer 例如以太网、令牌环、HDLC、帧中继、ISDN、ATM、IEEE 802.11、FDDI、PPP 1 物理层 physical layer 例如调制解调器、无线电、光纤 通常人们认为OSI模型的最上面三层（应用层、表示层和会话层）在TCP/IP组中是一个应用层。由于TCP/IP有一个相对较弱的会话层，由TCP和RTP下的打开和关闭连接组成，并且在TCP和UDP下的各种应用提供不同的端口号，这些功能能够由单个的应用程序（或者那些应用程序所使用的库）增加。与此相似的是，IP是按照将它下面的网络当作一个黑盒子的思想设计的，这样在讨论TCP/IP的时候就可以把它当作一个独立的层。
4 应用层 application layer 例如HTTP、FTP、DNS （如BGP和RIP这样的路由协议，尽管由于各种各样的原因它们分别运行在TCP和UDP上，仍然可以将它们看作网络层的一部分） 3 传输层 transport layer 例如TCP、UDP、RTP、SCTP （如OSPF这样的路由协议，尽管运行在IP上也可以看作是网络层的一部分） 2 网络互连层 internet layer 对于TCP/IP来说这是因特网协议（IP） （如ICMP和IGMP这样的必须协议尽管运行在IP上，也仍然可以看作是网络互连层的一部分；ARP不运行在IP上） 1 网络访问（链接）层 Network Access (link) layer 例如以太网、Wi-Fi、MPLS等。 扩展阅读 一文一图搞懂OSI七层模型_long_songs的博客-CSDN博客]]></description>
</item>
<item>
  <title>TUN TAP</title>
  <link>/posts/tun-tap/</link>
  <pubDate>Wed, 15 Mar 2023 05:56:20 &#43;0000</pubDate>
  <author>Cyan</author>
  <guid>/posts/tun-tap/</guid>
  <description><![CDATA[TUN / TAP 1 2 # ls /dev/net tun TAP模拟2层设备（MAC），TUN模拟3层设备（IP）。
REF 虚拟设备之TUN和TAP - 知乎 (zhihu.com)
TCP/IP协议族 - 维基百科，自由的百科全书 (wikipedia.org)]]></description>
</item>
<item>
  <title>PVE编译Realtek网卡驱动</title>
  <link>/posts/pve-realtek-driver/</link>
  <pubDate>Tue, 07 Mar 2023 14:43:48 &#43;0000</pubDate>
  <author>Cyan</author>
  <guid>/posts/pve-realtek-driver/</guid>
  <description><![CDATA[预准备 下载内核源码 1 sudo apt-get install linux-headers-$(uname -r) 创建链接 1 ln -s /boot/System.map-$(uname -r) /lib/modules/$(uname -r)/build/System.map 生成证书 1 openssl req -new -nodes -utf8 -sha512 -days 36500 -batch -x509 -config x509.genkey -outform DER -out signing_key.x509 -keyout signing_key.pem 1 cp signing_key.pem signing_key.x509 /usr/src/linux-headers-$(uname -r)/certs/ REF Realtek PCIe FE / GBE / 2.5G / Gaming Ethernet Family Controller Software - REALTEK
关于 /lib/modules/内核版本号/ build 和 /source_/lib/modules/build_小羊苏C的博客-CSDN博客
PVE默认R8169网卡驱动不兼容RTL8111/8168/8411问题记录 - ColoFly - 博客园 (cnblogs.com)
ubuntu16.04驱动安装提示sign-file: certs/signing_key.]]></description>
</item>
<item>
  <title>快速创建临时服务器</title>
  <link>/posts/quick-server/</link>
  <pubDate>Mon, 06 Mar 2023 16:48:58 &#43;0000</pubDate>
  <author>Cyan</author>
  <guid>/posts/quick-server/</guid>
  <description><![CDATA[Node.js http 1 2 npm install -g serve serve folder_name Python http 1 python -m http.server port ftp 1 2 pip install pyftpdlib python -m pyftpdlib -p 21 REF Python一秒搭建ftp服务器，帮助你在局域网共享文件 - 知乎 (zhihu.com)]]></description>
</item>
<item>
  <title>Nginx</title>
  <link>/posts/nginx/</link>
  <pubDate>Mon, 06 Mar 2023 15:11:39 &#43;0000</pubDate>
  <author>Cyan</author>
  <guid>/posts/nginx/</guid>
  <description><![CDATA[ABCD 在Docker中部署 先运行一下 1 docker run --name nginx nginx CtrlC
创建卷 1 2 mkdir -p /home/docker-nginx mkdir -p /home/docker-nginx/html 复制配置文件 1 2 docker cp nginx:/etc/nginx /var mv /var/nginx /home/docker-nginx/conf 过河拆桥 1 2 docker stop nginx docker rm nginx 运行 1 2 3 4 docker run -p 80:80 -p 443:443 --name nginx --restart=unless-stopped \ -v /home/docker-nginx/conf:/etc/nginx \ -v /home/docker-nginx/html:/usr/share/nginx/html \ -d nginx REF docker nginx -v 挂载配置文件问题_很懒的十六的博客-CSDN博客
Nginx 配置详解 | 菜鸟教程 (runoob.]]></description>
</item>
<item>
  <title>Linux Timeline</title>
  <link>/posts/linux-timeline/</link>
  <pubDate>Mon, 06 Mar 2023 13:18:58 &#43;0000</pubDate>
  <author>Cyan</author>
  <guid>/posts/linux-timeline/</guid>
  <description><![CDATA[]]></description>
</item>
<item>
  <title>PVE</title>
  <link>/posts/pve/</link>
  <pubDate>Sun, 05 Mar 2023 05:42:12 &#43;0000</pubDate>
  <author>Cyan</author>
  <guid>/posts/pve/</guid>
  <description><![CDATA[REF https://www.right.com.cn/FORUM/thread-8231970-1-1.html http://www.naxs.cn/zcjh/13705.html]]></description>
</item>
<item>
  <title>LXC容器</title>
  <link>/posts/lxc/</link>
  <pubDate>Sat, 04 Mar 2023 05:19:31 &#43;0000</pubDate>
  <author>Cyan</author>
  <guid>/posts/lxc/</guid>
  <description><![CDATA[REF https://www.redhat.com/zh/topics/containers/whats-a-linux-container]]></description>
</item>
<item>
  <title>7z 命令行</title>
  <link>/posts/7zip/</link>
  <pubDate>Sat, 11 Feb 2023 16:58:00 &#43;0800</pubDate>
  <author>Cyan</author>
  <guid>/posts/7zip/</guid>
  <description><![CDATA[命令行 7-zip │ 7z.exe │ 7zFM.exe │ 7zG.exe
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 C:\Program Files\7-Zip&gt;7z -h 7-Zip 21.]]></description>
</item>
<item>
  <title>Docker</title>
  <link>/posts/docker-basic/</link>
  <pubDate>Thu, 02 Feb 2023 03:28:00 &#43;0800</pubDate>
  <author>Cyan</author>
  <guid>/posts/docker-basic/</guid>
  <description><![CDATA[基本概念 docker 说明 Image 源文件 Container Image的一个运行实例 Volume Container的虚拟存储卷 常用命令 相互复制文件 1 docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH 1 docker cp [OPTIONS] SRC_PATH CONTAINER:DEST_PATH 1 docker cp [OPTIONS] CONTAINER:SRC_PATH CONTAINER:DEST_PATH 更新container自启动状态 1 2 3 docker update --restart=unless-stopped [容器名] no/on-failure/always/unless-stopped 进入容器命令行 1 docker exec -it [containerid] /bin/bash 映射 Example:
1 docker run -p 80:8080 -v local_path:container_path Ref 什么是Docker？看这一篇干货文章就够了！ - 知乎 (zhihu.com)
浅谈Linux Cgroups机制 - 知乎 (zhihu.com)
docker Volume - 知乎 (zhihu.com)
Link jesseduffield/lazydocker: The lazier way to manage everything docker (github.]]></description>
</item>
<item>
  <title>Windows 符号链接</title>
  <link>/posts/mklink/</link>
  <pubDate>Tue, 17 Jan 2023 22:54:00 &#43;0800</pubDate>
  <author>Cyan</author>
  <guid>/posts/mklink/</guid>
  <description><![CDATA[ 1 2 3 4 5 6 7 8 9 10 11 12 C:\Windows\System32&gt;mklink 创建符号链接。 MKLINK [[/D] | [/H] | [/J]] Link Target /D 创建目录符号链接。默认为文件 符号链接。 /H 创建硬链接而非符号链接。 /J 创建目录联接。 Link 指定新的符号链接名称。 Target 指定新链接引用的路径 (相对或绝对)。 ]]></description>
</item>
<item>
  <title>Anaconda镜像</title>
  <link>/posts/conda-source/</link>
  <pubDate>Fri, 06 Jan 2023 19:55:00 &#43;0800</pubDate>
  <author>Cyan</author>
  <guid>/posts/conda-source/</guid>
  <description><![CDATA[<p>修改用户目录下的 <code>.condarc</code> 文件；</p>
<p>没有则执行 <code>conda config --set show_channel_urls yes</code> 生成。</p>]]></description>
</item>
<item>
  <title>Python处理剪贴板</title>
  <link>/posts/clipboard/</link>
  <pubDate>Tue, 29 Nov 2022 17:27:55 &#43;0800</pubDate>
  <author>Cyan</author>
  <guid>/posts/clipboard/</guid>
  <description><![CDATA[去除换行 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import time import os import pyperclip def exec(): &#34;&#34;&#34;logic&#34;&#34;&#34; content = pyperclip.paste().replace(&#39;\r\n&#39;, &#39;&#39;).replace(&#39;\n&#39;, &#39;&#39;) pyperclip.copy(content) return content if __name__ == &#39;__main__&#39;: try: res = exec() os.system(&#34;color 27&#34;) print(res) except AttributeError: os.system(&#34;color 47&#34;) time.sleep(1) 保存图片 1 2 3 4 5 6 7 8 9 10 11 12 13 import time import os from PIL import ImageGrab try: img = ImageGrab.]]></description>
</item>
<item>
  <title>自动打卡</title>
  <link>/posts/auto-clock-in/</link>
  <pubDate>Mon, 28 Nov 2022 12:16:58 &#43;0800</pubDate>
  <author>Cyan</author>
  <guid>/posts/auto-clock-in/</guid>
  <description><![CDATA[]]></description>
</item>
<item>
  <title>CUDA、CUDNN</title>
  <link>/posts/cuda-cudnn/</link>
  <pubDate>Sat, 21 May 2022 19:21:32 &#43;0800</pubDate>
  <author>Cyan</author>
  <guid>/posts/cuda-cudnn/</guid>
  <description><![CDATA[CUDA与CUDNN CUDA CUDA（Compute Unified Device Architecture），是显卡厂商NVIDIA推出的运算平台。 CUDA™是一种由NVIDIA推出的通用并行计算架构，该架构使GPU能够解决复杂的计算问题。
CUDA_百度百科 (baidu.com)
CUDNN NVIDIA cuDNN是用于深度神经网络的GPU加速库。它强调性能、易用性和低内存开销。NVIDIA cuDNN可以集成到更高级别的机器学习框架中，如谷歌的Tensorflow、加州大学伯克利分校的流行caffe软件。简单的插入式设计可以让开发人员专注于设计和实现神经网络模型，而不是简单调整性能，同时还可以在GPU上实现高性能现代并行计算。
参考（强烈推荐）：CUDA与cuDNN - 简书 (jianshu.com)
NVIDIA的驱动与CUDA版本 在第一次装的时候，满脑子？？？
NVDIA驱动安装的有个CUDA了，版本和需要的不对怎么办，难道重装驱动吗？ 需要多个CUDA怎么办？ 驱动版本与CUDA版本 随驱动安装的叫做driver版本，自己后续安装的叫做runtime版本，可以随意安装多个版本的CUDA，但是保证driver版本号&gt;=runtime版本号
多版本共存 程序在调用CUDA的时候一般是利用path（或者说是windows环境变量）去加载dll等，保证每个版本的文件完整，并且在path中能够搜索到即可（windows也就是配置好环境变量）。
安装 首先要确定需要安装的版本。tensorflow可以在从源代码构建 | TensorFlow (google.cn)查看
手动安装 Linux建议直接CONDA安装
下载地址 CUDA：CUDA Toolkit Archive | NVIDIA Developer
CUDNN：NVIDIA cuDNN | NVIDIA Developer
安装 建议看下面的博客，讲的很好
cuda安装教程+cudnn安装教程_sinat_23619409的博客-CSDN博客_cuda安装
使用CONDA安装 CUDA
1 conda install cudatoolkit=&lt;版本&gt; cuDNN
1 conda install cudnn=&lt;版本&gt; ]]></description>
</item>
<item>
  <title>Python 常识入门(?)</title>
  <link>/posts/python-builtin/</link>
  <pubDate>Sat, 21 May 2022 19:21:32 &#43;0800</pubDate>
  <author>Cyan</author>
  <guid>/posts/python-builtin/</guid>
  <description><![CDATA[list, tuple, set, dict 1 2 3 4 [i for i in range(10)] (i for i in range(10)) {i for i in range(10)} {i:i for i in range(10)} lambda 1 2 3 4 lambda arguments : expression x = lambda a : a + 10 print(x(5)) sort 1 2 3 4 arr=[1,8,3,6,5,4,7,2,9] sorted(arr) list.sort(reverse=True|False, key=myFunc) 1 2 3 4 5 6 7 8 9 10 11 12 def myFunc(e): return e[&#39;year&#39;] cars = [ {&#39;car&#39;: &#39;Porsche&#39;, &#39;year&#39;: 1963}, {&#39;car&#39;: &#39;Audi&#39;, &#39;year&#39;: 2010}, {&#39;car&#39;: &#39;BMW&#39;, &#39;year&#39;: 2019}, {&#39;car&#39;: &#39;Volvo&#39;, &#39;year&#39;: 2013} ] cars.]]></description>
</item>
</channel>
</rss>
