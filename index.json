[{"categories":["DL"],"content":"CUDA与CUDNN CUDA CUDA（Compute Unified Device Architecture），是显卡厂商NVIDIA推出的运算平台。 CUDA™是一种由NVIDIA推出的通用并行计算架构，该架构使GPU能够解决复杂的计算问题。 CUDA_百度百科 (baidu.com) CUDNN NVIDIA cuDNN是用于深度神经网络的GPU加速库。它强调性能、易用性和低内存开销。NVIDIA cuDNN可以集成到更高级别的机器学习框架中，如谷歌的Tensorflow、加州大学伯克利分校的流行caffe软件。简单的插入式设计可以让开发人员专注于设计和实现神经网络模型，而不是简单调整性能，同时还可以在GPU上实现高性能现代并行计算。 参考（强烈推荐）：CUDA与cuDNN - 简书 (jianshu.com) ","date":"2022-05-21","objectID":"/post/cuda_cudnn/:1:0","tags":null,"title":"CUDA、CUDNN","uri":"/post/cuda_cudnn/"},{"categories":["DL"],"content":"NVIDIA的驱动与CUDA版本 在第一次装的时候，满脑子？？？ NVDIA驱动安装的有个CUDA了，版本和需要的不对怎么办，难道重装驱动吗？ 需要多个CUDA怎么办？ 驱动版本与CUDA版本 随驱动安装的叫做driver版本，自己后续安装的叫做runtime版本，可以随意安装多个版本的CUDA，但是保证driver版本号\u003e=runtime版本号 多版本共存 程序在调用CUDA的时候一般是利用path（或者说是windows环境变量）去加载dll等，保证每个版本的文件完整，并且在path中能够搜索到即可（windows也就是配置好环境变量）。 ","date":"2022-05-21","objectID":"/post/cuda_cudnn/:2:0","tags":null,"title":"CUDA、CUDNN","uri":"/post/cuda_cudnn/"},{"categories":["DL"],"content":"安装 首先要确定需要安装的版本。tensorflow可以在从源代码构建 | TensorFlow (google.cn)查看 手动安装 Linux建议直接CONDA安装 下载地址 CUDA：CUDA Toolkit Archive | NVIDIA Developer CUDNN：NVIDIA cuDNN | NVIDIA Developer 安装 建议看下面的博客，讲的很好 cuda安装教程+cudnn安装教程_sinat_23619409的博客-CSDN博客_cuda安装 使用CONDA安装 CUDA conda install cudatoolkit=\u003c版本\u003e cuDNN conda install cudnn=\u003c版本\u003e ","date":"2022-05-21","objectID":"/post/cuda_cudnn/:3:0","tags":null,"title":"CUDA、CUDNN","uri":"/post/cuda_cudnn/"},{"categories":["Python"],"content":"list, tuple, set, dict [i for i in range(10)] (i for i in range(10)) {i for i in range(10)} {i:i for i in range(10)} ","date":"2022-05-21","objectID":"/post/python_builtin/:1:0","tags":["Python","OI"],"title":"Python 常识入门(?)","uri":"/post/python_builtin/"},{"categories":["Python"],"content":"lambda lambda arguments : expression x = lambda a : a + 10 print(x(5)) ","date":"2022-05-21","objectID":"/post/python_builtin/:2:0","tags":["Python","OI"],"title":"Python 常识入门(?)","uri":"/post/python_builtin/"},{"categories":["Python"],"content":"sort arr=[1,8,3,6,5,4,7,2,9] sorted(arr) list.sort(reverse=True|False, key=myFunc) def myFunc(e): return e['year'] cars = [ {'car': 'Porsche', 'year': 1963}, {'car': 'Audi', 'year': 2010}, {'car': 'BMW', 'year': 2019}, {'car': 'Volvo', 'year': 2013} ] cars.sort(key=myFunc) cars.sort(key=lambda e: e['year']) ","date":"2022-05-21","objectID":"/post/python_builtin/:3:0","tags":["Python","OI"],"title":"Python 常识入门(?)","uri":"/post/python_builtin/"},{"categories":["Python"],"content":"cache 可以用于记忆化搜索。 请不要使用cache，除非你知道自己在做什么！ from functools import lru_cache @lru_cache(None) def add(x, y): print(\"calculating: %s + %s\" % (x, y)) return x + y add.clear_cache() print(add(1, 2)) print(add(1, 2)) print(add(2, 3)) ","date":"2022-05-21","objectID":"/post/python_builtin/:4:0","tags":["Python","OI"],"title":"Python 常识入门(?)","uri":"/post/python_builtin/"},{"categories":["Python"],"content":"引用 重要！python变量默认为引用，错误使用会带来麻烦 \u003e\u003e\u003e a=5;id(a) 2094838213040 \u003e\u003e\u003e a=6;id(a) 2094838213072 \u003e\u003e\u003e arr=[1,2,3];id(arr) 2094872788160 \u003e\u003e\u003e arr[2]*=-1;id(arr) 2094872788160 \u003e\u003e\u003e arr=[[0]*5 for i in range(2)];arr [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]] \u003e\u003e\u003e arr[1][1]=1;arr [[0, 0, 0, 0, 0], [0, 1, 0, 0, 0]] \u003e\u003e\u003e arr=[[0]*5]*2;arr [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]] \u003e\u003e\u003e arr[1][1]=1;arr [[0, 1, 0, 0, 0], [0, 1, 0, 0, 0]] ","date":"2022-05-21","objectID":"/post/python_builtin/:5:0","tags":["Python","OI"],"title":"Python 常识入门(?)","uri":"/post/python_builtin/"},{"categories":["Python"],"content":"作用域 在if语句等内定义的变量，外部可用； 注意global、nonlocal关键字的使用 ","date":"2022-05-21","objectID":"/post/python_builtin/:6:0","tags":["Python","OI"],"title":"Python 常识入门(?)","uri":"/post/python_builtin/"},{"categories":["OI"],"content":"动规解题的一般思路 将原问题分解为子问题 把原问题分解为若干个子问题，子问题和原问题形式相同或类似，只不过规模变小了。子问题都解决，原问题即解决(数字三角形例）。 子问题的解一旦求出就会被保存，所以每个子问题只需求解一次。 确定状态 在用动态规划解题时，我们往往将和子问题相关的各个变量的一组取值，称之为一个“状态”。一个“状态”对应于一个或多个子问题，所谓某个“状态”下的“值”，就是这个“状态”所对应的子问题的解。 所有“状态”的集合，构成问题的“状态空间”。“状态空间”的大小，与用动态规划解决问题的时间复杂度直接相关。在数字三角形的例子里，一共有N×(N+1)/2个数字，所以这个问题的状态空间里一共就有N×(N+1)/2个状态。 整个问题的时间复杂度是状态数目乘以计算每个状态所需时间。在数字三角形里每个“状态”只需要经过一次，且在每个状态上作计算所花的时间都是和N无关的常数。 确定一些初始状态（边界状态）的值 以“数字三角形”为例，初始状态就是底边数字，值就是底边数字值。 确定状态转移方程 定义出什么是“状态”，以及在该“状态”下的“值”后，就要找出不同的状态之间如何迁移――即如何从一个或多个“值”已知的“状态”，求出另一个“状态”的“值”(递推型)。状态的迁移可以用递推公式表示，此递推公式也可被称作“状态转移方程”。 graph LR;\r子问题分解--\u003e确定状态\r确定状态--\u003e确定初始状态值\r确定初始状态值--\u003e确定状态转移方程 ","date":"2022-05-21","objectID":"/post/dp/:1:0","tags":["Python","OI"],"title":"动态规划","uri":"/post/dp/"},{"categories":["OI"],"content":"能用动规解决的问题的特点 问题具有最优子结构性质。如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质。 无后效性。当前的若干个状态值一旦确定，则此后过程的演变就只和这若干个状态的值有关，和之前是采取哪种手段或经过哪条路径演变到当前的这若干个状态，没有关系。 ","date":"2022-05-21","objectID":"/post/dp/:2:0","tags":["Python","OI"],"title":"动态规划","uri":"/post/dp/"},{"categories":["OI"],"content":"递归到动规的一般转化方法 递归函数有n个参数，就定义一个n维的数组，数组的下标是递归函数参数的取值范围，数组元素的值是递归函数的返回值; 这样就可以从边界值开始，逐步填充数组，相当于计算递归函数值的逆过程。 ","date":"2022-05-21","objectID":"/post/dp/:3:0","tags":["Python","OI"],"title":"动态规划","uri":"/post/dp/"},{"categories":null,"content":"Ubuntu 20.04 LTS ARM64 at least 4G RAM ","date":"2022-04-27","objectID":"/post/pi4b_system/:1:0","tags":["raspi","ubuntu","Linux"],"title":"树莓派4B × Ubuntu","uri":"/post/pi4b_system/"},{"categories":null,"content":"默认账户密码 ubuntu ubuntu ","date":"2022-04-27","objectID":"/post/pi4b_system/:2:0","tags":["raspi","ubuntu","Linux"],"title":"树莓派4B × Ubuntu","uri":"/post/pi4b_system/"},{"categories":null,"content":"apt源 deb https://mirror.tuna.tsinghua.edu.cn/ubuntu-ports/ focal main restricted universe multiverse\rdeb https://mirror.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiverse\rdeb https://mirror.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse\rdeb https://mirror.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse\rdeb https://mirror.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-proposed main restricted universe multiverse\" ","date":"2022-04-27","objectID":"/post/pi4b_system/:3:0","tags":["raspi","ubuntu","Linux"],"title":"树莓派4B × Ubuntu","uri":"/post/pi4b_system/"},{"categories":null,"content":"WiFi network: ethernets: eth0: dhcp4: true optional: true version: 2 wifis: wlan0: dhcp4: true access-points: \"你的wifi的ssid\": password: \"你的密码\" netplan try netplan apply ","date":"2022-04-27","objectID":"/post/pi4b_system/:4:0","tags":["raspi","ubuntu","Linux"],"title":"树莓派4B × Ubuntu","uri":"/post/pi4b_system/"},{"categories":["Python","OI"],"content":"基本 ","date":"2022-04-08","objectID":"/post/pythonoibasis/:1:0","tags":null,"title":"Python OI 基础（语言篇）","uri":"/post/pythonoibasis/"},{"categories":["Python","OI"],"content":"输入 def cin1(): return [int(i) for i in input().split()] def cin2(): return map(int, input().split()) def cin3(): return list(map(int, input().split())) # 输入一个常数 n, = cin() # 注意',' m, n = cin() # 输入一个数组 arr = cin() # 注意cin2会返回map对象 ","date":"2022-04-08","objectID":"/post/pythonoibasis/:1:1","tags":null,"title":"Python OI 基础（语言篇）","uri":"/post/pythonoibasis/"},{"categories":["Python","OI"],"content":"输入输出重定向 使用操作系统的重定向 python script.py \u003c input \u003e output ","date":"2022-04-08","objectID":"/post/pythonoibasis/:1:2","tags":null,"title":"Python OI 基础（语言篇）","uri":"/post/pythonoibasis/"},{"categories":["Python","OI"],"content":"Python 与 STL Python 标准库 — Python 3.8.12 文档 本人出身于C/C++，这里用类STL表示Python中可利用的built in lib ","date":"2022-04-08","objectID":"/post/pythonoibasis/:2:0","tags":null,"title":"Python OI 基础（语言篇）","uri":"/post/pythonoibasis/"},{"categories":["Python","OI"],"content":"priority queue (heap) 优先队列往往用堆来实现。优先队列 - 维基百科 from heapq import * ","date":"2022-04-08","objectID":"/post/pythonoibasis/:2:1","tags":null,"title":"Python OI 基础（语言篇）","uri":"/post/pythonoibasis/"},{"categories":["Python","OI"],"content":"vector arr = list() arr = [0]*n arr = [[0]*n for _ in range(m)] ","date":"2022-04-08","objectID":"/post/pythonoibasis/:2:2","tags":null,"title":"Python OI 基础（语言篇）","uri":"/post/pythonoibasis/"},{"categories":["Python","OI"],"content":"set set_ = set() set_ = {1, 2, 3} ","date":"2022-04-08","objectID":"/post/pythonoibasis/:2:3","tags":null,"title":"Python OI 基础（语言篇）","uri":"/post/pythonoibasis/"},{"categories":["Python","OI"],"content":"map from collections import Counter, defaultdict arr = [1, 1, 2, 2] counter = Counter(arr) # 计数 defaultdict_ = defaultdict(lambda: -1) # 默认字典 dict_ = dict() dict_ = { 1: 2, 2: 4 } dict_ = {i: i for i in range(5)} ","date":"2022-04-08","objectID":"/post/pythonoibasis/:2:4","tags":null,"title":"Python OI 基础（语言篇）","uri":"/post/pythonoibasis/"},{"categories":["Python","OI"],"content":"stack 5. 数据结构 — Python 3.8.12 文档 列表方法使得列表作为堆栈非常容易，最后一个插入，最先取出（“后进先出”）。要添加一个元素到堆栈的顶端，使用 append() 。要从堆栈顶部取出一个元素，使用 pop() ，不用指定索引。 ","date":"2022-04-08","objectID":"/post/pythonoibasis/:2:5","tags":null,"title":"Python OI 基础（语言篇）","uri":"/post/pythonoibasis/"},{"categories":["Python","OI"],"content":"queue 5. 数据结构 — Python 3.8.12 文档 列表也可以用作队列，其中先添加的元素被最先取出 (“先进先出”)；然而列表用作这个目的相当低效。因为在列表的末尾添加和弹出元素非常快，但是在列表的开头插入或弹出元素却很慢 (因为所有的其他元素都必须移动一位)。 若要实现一个队列，可使用 collections.deque，它被设计成可以快速地从两端添加或弹出元素 from collections import deque ","date":"2022-04-08","objectID":"/post/pythonoibasis/:2:6","tags":null,"title":"Python OI 基础（语言篇）","uri":"/post/pythonoibasis/"},{"categories":["Python","OI"],"content":"不需要指针的链表 class LinkedListNode: def __init__(self, val, nxt) -\u003e None: self.val = val self.nxt = nxt vals, nxt = [], [] 还可以是双指针链表 vals, pre, nxt = [], [], [] ","date":"2022-04-08","objectID":"/post/pythonoibasis/:3:0","tags":null,"title":"Python OI 基础（语言篇）","uri":"/post/pythonoibasis/"},{"categories":["OI"],"content":"前言 在21年我第一次学习动态规划算法的时候，HQ学长安排的入门题目即是背包。直至前不久我只把背包当成一种有限的题目来看，未想还有如此讲究。 实际上，有很多问题可以规约为一个背包问题。 ","date":"2022-04-08","objectID":"/post/knapsackproblem/:1:0","tags":null,"title":"背包问题","uri":"/post/knapsackproblem/"},{"categories":["OI"],"content":"背包问题的三类 01背包：某物品选 or 不选； 完全背包：某物品无限多可选； 多重背包：某物品有n[i]件可选。 👇以下内容主要摘自：希望用一种规律搞定背包问题 - 组合总和 Ⅳ - 力扣（LeetCode） (leetcode-cn.com) ","date":"2022-04-08","objectID":"/post/knapsackproblem/:2:0","tags":null,"title":"背包问题","uri":"/post/knapsackproblem/"},{"categories":["OI"],"content":"样题（LeetCode） 组合问题： 377. 组合总和 Ⅳ\r378. 目标和\r379. 零钱兑换 II True、False问题： 377. 单词拆分\r378. 分割等和子集 最大最小问题： 377. 一和零\r378. 零钱兑换 ","date":"2022-04-08","objectID":"/post/knapsackproblem/:3:0","tags":null,"title":"背包问题","uri":"/post/knapsackproblem/"},{"categories":["OI"],"content":"公式一览 组合问题公式 dp[i] += dp[i-num] True、False问题公式 dp[i] = dp[i] or dp[i-num] 最大最小问题公式 dp[i] = min(dp[i], dp[i-num]+1) dp[i] = max(dp[i], dp[i-num]+1) 问题几步骤 分析是否为背包问题。 是以上三种背包问题中的哪一种。 是0-1背包问题还是完全背包问题。也就是题目给的nums数组中的元素是否可以重复使用。 如果是组合问题，是否需要考虑元素之间的顺序。需要考虑顺序有顺序的解法，不需要考虑顺序又有对应的解法。 背包问题的判定 背包问题具备的特征：给定一个target，target可以是数字也可以是字符串，再给定一个数组nums，nums中装的可能是数字，也可能是字符串，问：能否使用nums中的元素做各种排列组合得到target。 背包问题技巧： 如果是0-1背包，即数组中的元素不可重复使用，nums放在外循环，target在内循环，且内循环倒序； for num in nums: for i in range(target, nums-1, -1): 如果是完全背包，即数组中的元素可重复使用，nums放在外循环，target在内循环。且内循环正序。 for num in nums: for i in range(nums, target+1): 如果组合问题需考虑元素之间的顺序，需将target放在外循环，将nums放在内循环。 for i in range(1, target+1): for num in nums: ","date":"2022-04-08","objectID":"/post/knapsackproblem/:4:0","tags":null,"title":"背包问题","uri":"/post/knapsackproblem/"},{"categories":["OI"],"content":"参考 希望用一种规律搞定背包问题 - 组合总和 Ⅳ - 力扣（LeetCode） (leetcode-cn.com) 【动态规划】01背包问题（通俗易懂，超基础讲解）_Yngz_Miao的博客-CSDN博客_01背包问题动态规划详解 动态规划：完全背包、多重背包_Allen_0526的博客-CSDN博客_完全背包 背包九讲（转载，实在不知道哪个是原创了） - _努力努力再努力x - 博客园 (cnblogs.com) ","date":"2022-04-08","objectID":"/post/knapsackproblem/:5:0","tags":null,"title":"背包问题","uri":"/post/knapsackproblem/"},{"categories":["NLP"],"content":"前言 研究BERT（无果），记录些好的参考（减轻浏览器收藏夹的压力……） ","date":"2022-04-06","objectID":"/post/bert/:1:0","tags":["NLP"],"title":"BERT","uri":"/post/bert/"},{"categories":["NLP"],"content":"参考 论文解读:BERT模型及fine-tuning - 知乎 (zhihu.com) LeeMeng - 進擊的 BERT：NLP 界的巨人之力與遷移學習 google-research/bert: TensorFlow code and pre-trained models for BERT (github.com) LeeMeng - 淺談神經機器翻譯 \u0026 用 Transformer 與 TensorFlow 2 英翻中 ","date":"2022-04-06","objectID":"/post/bert/:2:0","tags":["NLP"],"title":"BERT","uri":"/post/bert/"},{"categories":["NLP"],"content":"前言 曾经天真的以为LSTM\u003eGRU 实际上GRU的出现时间晚于LSTM（值得深究不是吗？） ","date":"2022-04-05","objectID":"/post/lstmandgru/:1:0","tags":["NLP"],"title":"LSTM and GRU","uri":"/post/lstmandgru/"},{"categories":["NLP"],"content":"References GRU及双向RNN介绍_幸福诗歌的博客-CSDN博客_双向gru GRU与LSTM总结_lreaderl的博客-CSDN博客_gru lstm ","date":"2022-04-05","objectID":"/post/lstmandgru/:2:0","tags":["NLP"],"title":"LSTM and GRU","uri":"/post/lstmandgru/"},{"categories":["Android"],"content":"Installation 准备 启用Hyper-V 和 虚拟机平台 配置好 ADB 下载WSA package [Microsoft Store - Generation Project (v1.2.3) by @rgadguard \u0026 mkuba50] (rg-adguard.net) https://www.microsoft.com/store/productId/9P3395VX91NR 下载最大的那个（1G+） 安装 截止日前，不需要修改区域（中国区），仅亚马逊商店不提供服务 管理员运行Power Shell Add-AppxPackage -Path \u003cpath to downloaded file\u003e 在Windows中打开开发者模式 连接到ADB adb connect [::1]:58526 安装程序 adb -s [::1]:58526 install \"D:\\HandShaker.apk\" ","date":"2022-04-05","objectID":"/post/wsa/:1:0","tags":["ADB","Windows"],"title":"WSA 安装与使用","uri":"/post/wsa/"},{"categories":["Android"],"content":"推荐 Item Intro HandShaker 锤子遗产、子系统和电脑互传文件 权限狗 给应用添加权限，比如 Ｖ** 微软桌面 App 启动器 https://apkpure.com/ Apk 下载 ","date":"2022-04-05","objectID":"/post/wsa/:2:0","tags":["ADB","Windows"],"title":"WSA 安装与使用","uri":"/post/wsa/"},{"categories":["Android"],"content":"代理 宿主机器安装应用，并allow lan，端口修改为自己的配置 @echo off adb connect [::1]:58526 \u0026\u0026 adb shell \"settings put global http_proxy `ip route list match 0 table all scope global | cut -F3`:7890\" pause ","date":"2022-04-05","objectID":"/post/wsa/:3:0","tags":["ADB","Windows"],"title":"WSA 安装与使用","uri":"/post/wsa/"},{"categories":["Android"],"content":"Ref Windows11 安装 WSA 简单上手一试_姜戈12的博客-CSDN博客 ","date":"2022-04-05","objectID":"/post/wsa/:4:0","tags":["ADB","Windows"],"title":"WSA 安装与使用","uri":"/post/wsa/"},{"categories":["DL"],"content":"前言 参考的资料和自己在进行炼丹（姑且这么称作）的时候，经常使用的是Adam，在尝试了learning_rate, schedule等方法（无果，大概…）后，突然想到要去了解一下其中的原理。 ","date":"2022-04-05","objectID":"/post/optimizer/:1:0","tags":["DL"],"title":"Optimizer","uri":"/post/optimizer/"},{"categories":["DL"],"content":"资料 一个框架看懂优化算法之异同 SGD/AdaGrad/Adam - 知乎 (zhihu.com) Adam那么棒，为什么还对SGD念念不忘 (2)—— Adam的两宗罪 - 知乎 (zhihu.com) Adam那么棒，为什么还对SGD念念不忘 (3)—— 优化算法的选择与使用策略 - 知乎 (zhihu.com) ","date":"2022-04-05","objectID":"/post/optimizer/:2:0","tags":["DL"],"title":"Optimizer","uri":"/post/optimizer/"},{"categories":["DL"],"content":"综述 Adam自带优化，会调整learning_rate（所以自己再用schedule, 微调learning_rate貌似没啥用了…… 大神都用SGD手调参数 ","date":"2022-04-05","objectID":"/post/optimizer/:3:0","tags":["DL"],"title":"Optimizer","uri":"/post/optimizer/"},{"categories":null,"content":"⠄⠄⠄⠄⢠⣿⣿⣿⣿⣿⢻⣿⣿⣿⣿⣿⣿⣿⣿⣯⢻⣿⣿⣿⣿⣆⠄⠄⠄\r⠄⠄⣼⢀⣿⣿⣿⣿⣏⡏⠄⠹⣿⣿⣿⣿⣿⣿⣿⣿⣧⢻⣿⣿⣿⣿⡆⠄⠄\r⠄⠄⡟⣼⣿⣿⣿⣿⣿⠄⠄⠄⠈⠻⣿⣿⣿⣿⣿⣿⣿⣇⢻⣿⣿⣿⣿⠄⠄\r⠄⢰⠃⣿⣿⠿⣿⣿⣿⠄⠄⠄⠄⠄⠄⠙⠿⣿⣿⣿⣿⣿⠄⢿⣿⣿⣿⡄⠄\r⠄⢸⢠⣿⣿⣧⡙⣿⣿⡆⠄⠄⠄⠄⠄⠄⠄⠈⠛⢿⣿⣿⡇⠸⣿⡿⣸⡇⠄\r⠄⠈⡆⣿⣿⣿⣿⣦⡙⠳⠄⠄⠄⠄⠄⠄⢀⣠⣤⣀⣈⠙⠃⠄⠿⢇⣿⡇⠄\r⠄⠄⡇⢿⣿⣿⣿⣿⡇⠄⠄⠄⠄⠄⣠⣶⣿⣿⣿⣿⣿⣿⣷⣆⡀⣼⣿⡇⠄\r⠄⠄⢹⡘⣿⣿⣿⢿⣷⡀⠄⢀⣴⣾⣟⠉⠉⠉⠉⣽⣿⣿⣿⣿⠇⢹⣿⠃⠄\r⠄⠄⠄⢷⡘⢿⣿⣎⢻⣷⠰⣿⣿⣿⣿⣦⣀⣀⣴⣿⣿⣿⠟⢫⡾⢸⡟⠄.\r⠄⠄⠄⠄⠻⣦⡙⠿⣧⠙⢷⠙⠻⠿⢿⡿⠿⠿⠛⠋⠉⠄⠂⠘⠁⠞⠄⠄⠄\r⠄⠄⠄⠄⠄⠈⠙⠑⣠⣤⣴⡖⠄⠿⣋⣉⣉⡁⠄⢾⣦⠄⠄⠄⠄⠄⠄⠄⠄ 普通大学生，喜欢做有意义的事情。 🌑**Coolapk** 🌕**CSDN** ","date":"2022-03-19","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":["OI"],"content":"检验 from math import * def is_prime(n): if n \u003c 2: return False for i in range(2, int(sqrt(n))+1): if n % i == 0: return False return True ","date":"2022-01-17","objectID":"/post/primenumber/:1:0","tags":null,"title":"素数","uri":"/post/primenumber/"},{"categories":["OI"],"content":"打表(欧式筛法) 0、1不是素数，素数的倍数不是素数（质因数分解） def prime(MAX_N): lst = [True for _ in range(MAX_N+1)] lst[0] = lst[1] = False for i in range(2, MAX_N//2): if lst[i]: for j in range(2*i, MAX_N+1, i): lst[j] = False return lst #define MAX 10005 bool prime[MAX]; void init_prime(){ memset(prime,true,sizeof(prime)); prime[0]=prime[1]=false; for(int i=2;i\u003c=MAX/2;i++){ if(!prime[i]) continue; for(int j=2*i;j\u003cMAX;j+=i){ prime[j]=false; } } } ","date":"2022-01-17","objectID":"/post/primenumber/:2:0","tags":null,"title":"素数","uri":"/post/primenumber/"},{"categories":["OI"],"content":"参考 【Python】质数的几种判断方法 - 知乎 (zhihu.com) python中质数实现_都枯槐的博客-CSDN博客_python素数 ","date":"2022-01-17","objectID":"/post/primenumber/:3:0","tags":null,"title":"素数","uri":"/post/primenumber/"},{"categories":["Windows"],"content":"注册表： HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default ","date":"2021-09-30","objectID":"/post/rdp/:0:0","tags":null,"title":"Win清理Remote Desktop记录","uri":"/post/rdp/"},{"categories":["DL"],"content":"tensorflow的默认调度策略是吃满显存，如果我们模型较小、显存较大、占用率不足40%（自己估计的）时，是可以利用GPU同时训练两个模型的。 ","date":"2021-09-16","objectID":"/post/tf_mem/:0:0","tags":["DL"],"title":"tensorflow1、2设置不占满显存","uri":"/post/tf_mem/"},{"categories":["DL"],"content":"tensorflow 1 config = tf.ConfigProto() config.gpu_options.allow_growth = True sess = tf.Session(config=config) ","date":"2021-09-16","objectID":"/post/tf_mem/:1:0","tags":["DL"],"title":"tensorflow1、2设置不占满显存","uri":"/post/tf_mem/"},{"categories":["DL"],"content":"tensorflow 2 gpus = tf.config.list_physical_devices(device_type='GPU') for gpu in gpus: tf.config.experimental.set_memory_growth(gpu, True) ","date":"2021-09-16","objectID":"/post/tf_mem/:2:0","tags":["DL"],"title":"tensorflow1、2设置不占满显存","uri":"/post/tf_mem/"},{"categories":["Python"],"content":" 并不是关于IP池，而是用于本地挂代理爬需要翻墙的数据 ","date":"2021-09-14","objectID":"/post/requestsproxy/:0:0","tags":["Python","requests"],"title":"Python Requests库代理","uri":"/post/requestsproxy/"},{"categories":["Python"],"content":"问题的发现与解决 在requests库较新版本，通过挂系统代理来爬取HTTPS会报SSL错误。 查了很多资料，大部分是 更换使用的包到urllib、降低requests库版本…… 解决不了问题，就解决发现问题的东西吗(ﾟДﾟ*)ﾉ 然后自己思考了一会，想起来爬虫有个IP池的操作，本质上也是使用别人的代理，那么，把代理指向本地呢——问题完美解决 import requests headers = { 'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 Edg/92.0.902.78' } sys_proxies = {'https': 'http://127.0.0.1:7890', 'http': 'http://127.0.0.1:7890'} # 指向本地代理 response = requests.get(json_url(tag, page), headers=headers, proxies=sys_proxies) # 配置代理 ","date":"2021-09-14","objectID":"/post/requestsproxy/:1:0","tags":["Python","requests"],"title":"Python Requests库代理","uri":"/post/requestsproxy/"},{"categories":["Python"],"content":"在默认情况下，中文在plt中会被绘制成▯，猜测应该是因为默认字体不包含中文； 可以通过配置字体的方法支持中文，大部分博客给出的字体是SimHei（黑体），但是渲染出来并不美观，经过我的测试，个人最推荐SimSun（宋体）。 from matplotlib import pyplot as plt '''👇两行配置''' plt.rcParams['font.sans-serif'] = ['SimSun'] # 修改字体为宋体 plt.rcParams['axes.unicode_minus'] = False # 正常显示 '-' ","date":"2021-09-13","objectID":"/post/plt_zhcn/:0:0","tags":null,"title":"matplotlib中文绘图","uri":"/post/plt_zhcn/"},{"categories":["Android"],"content":"前言 Google对于ADB的描述： Android 调试桥 (adb) 是一种功能多样的命令行工具，可让您与设备进行通信。adb 命令可用于执行各种设备操作（例如安装和调试应用），并提供对 Unix shell（可用来在设备上运行各种命令）的访问权限。 无线ADB和USB连接原理相同，只是传输介质不同 ","date":"2021-03-14","objectID":"/post/adbonlan/:0:0","tags":["ADB"],"title":"局域网安卓ABD调试","uri":"/post/adbonlan/"},{"categories":["Android"],"content":"简单流程 手机通过USB连接到电脑，处于开发者模式 CMD输入adb tcpip \u003c端口号\u003e（adb.exe已配置好path） CMD输入adb connect \u003c手机IP\u003e:\u003c端口号\u003e ","date":"2021-03-14","objectID":"/post/adbonlan/:1:0","tags":["ADB"],"title":"局域网安卓ABD调试","uri":"/post/adbonlan/"},{"categories":["Android"],"content":"tips 一般情况下，只要手机没有重启，已经完成上面操作的，再次连接只需要第3步 Windows Android Studio的Terminal本质也是CMD ","date":"2021-03-14","objectID":"/post/adbonlan/:2:0","tags":["ADB"],"title":"局域网安卓ABD调试","uri":"/post/adbonlan/"}]