<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>QEMU - 标签 - Cyan&#39;s Notebook</title>
    <link>/tags/qemu/</link>
    <description>QEMU - 标签 - Cyan&#39;s Notebook</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 30 Jul 2023 12:57:10 &#43;0000</lastBuildDate><atom:link href="/tags/qemu/" rel="self" type="application/rss+xml" /><item>
  <title>QEMU - QuickStart</title>
  <link>/posts/2023-07-30-qemu-quickstart/</link>
  <pubDate>Sun, 30 Jul 2023 12:57:10 &#43;0000</pubDate>
  <author>Cyan</author>
  <guid>/posts/2023-07-30-qemu-quickstart/</guid>
  <description><![CDATA[文章于2023年8月5日进行勘误，修正内容：
-smp sockets=1,cores=4,threads=4 =&gt; -smp 4,sockets=1,cores=4,threads=1 原因：threads参数表示每核心多少线程
删除-net user
Intro QEMU是一款跨平台的开源虚拟机工具，因为无GUI配置工具，有一定使用门槛
根据冯诺依曼结构，一个计算机可分为：
运算器 控制器 存储器 输入设备 输出设备 使用QEMU时，应该尽量往该模型联想
创建存储器 创建一个16G的虚拟磁盘文件
1 qemu-img create -f qcow2 drive 16G 虚拟硬件环境 运算器、控制器 -&gt; CPU、各种加速器* 输入、输出设备 -&gt; 网卡、CXL设备等 QEMU本身没有像VMware那样的GUI配置界面，所有配置通过命令行参数指定
1 2 3 qemu-system-x86_64 -machine q35 \ -smp 4,sockets=1,cores=4,threads=1 \ -m 4096 现在启动了一个机型为q35，处理器1插槽4核4线程，内存4096MB，使用默认网络配置的虚拟机，由于没有启动盘，并不会启动某个系统
利用虚拟硬件环境启动系统 我们已经有了一块硬盘drive作为启动盘，指定给虚拟环境：
1 2 3 4 qemu-system-x86_64 -machine q35 \ -smp 4,sockets=1,cores=4,threads=1 \ -m 4096 \ -drive file=drive 会发现，指定后并没有什么区别，是因为这个“硬盘”我们没有给它“安装”系统
安装系统 参考为物理机安装系统：]]></description>
</item>
<item>
  <title>QEMU - CXL</title>
  <link>/posts/2023-07-25-qemu-cxl/</link>
  <pubDate>Tue, 25 Jul 2023 00:00:57 &#43;0000</pubDate>
  <author>Cyan</author>
  <guid>/posts/2023-07-25-qemu-cxl/</guid>
  <description><![CDATA[Intro 文章不对CXL、Linux内核进行深究，可视为hello world研究
对于QEMU基本的使用知识，节省篇幅不再赘述，并省略繁琐细节
软件环境 宿主机&amp;客户机 ubuntu-22.04.2-live-server-amd64
QEMU 8.0.3 https://download.qemu.org/qemu-8.0.3.tar.xz
Download QEMU - QEMU
按照官方流程进行编译
启动虚拟机 1 2 3 4 5 6 7 8 9 qemu-system-x86_64 -M q35,cxl=on --enable-kvm -cpu host -m 4G,maxmem=8G,slots=8 -smp 4,sockets=1,cores=4 \ -net user \ -drive file=drive \ -object memory-backend-file,id=cxl-mem1,share=on,mem-path=/tmp/cxltest.raw,size=256M \ -object memory-backend-file,id=cxl-lsa1,share=on,mem-path=/tmp/lsa.raw,size=256M \ -device pxb-cxl,bus_nr=12,bus=pcie.0,id=cxl.1 \ -device cxl-rp,port=0,bus=cxl.1,id=root_port13,chassis=0,slot=2 \ -device cxl-type3,bus=root_port13,memdev=cxl-mem1,lsa=cxl-lsa1,id=cxl-pmem0 \ -M cxl-fmw.0.targets.0=cxl.1,cxl-fmw.0.size=4G 启动后应该可以在/dev目录下找到CXL文件
REF 在ubuntu上执行QEMU的编译安装_ubuntu安装qemu_田园诗人之园的博客-CSDN博客
linux报错：/bin/sh: 1: flex: not found scripts/Makefile.host:9: recipe for target ‘scripts/kconfig/lexe_锅锅是锅锅的博客-CSDN博客]]></description>
</item>
</channel>
</rss>
